// Code generated by mockery v2.12.1. DO NOT EDIT.

package repository

import (
	context "context"

	repository "github.com/Sugar-pack/test-task/internal/repository"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// CreateCompany provides a mock function with given fields: ctx, company
func (_m *CompanyRepository) CreateCompany(ctx context.Context, company *repository.Company) error {
	ret := _m.Called(ctx, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCompany provides a mock function with given fields: ctx, company
func (_m *CompanyRepository) DeleteCompany(ctx context.Context, company *repository.CompanyForFilter) (int64, error) {
	ret := _m.Called(ctx, company)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *repository.CompanyForFilter) int64); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repository.CompanyForFilter) error); ok {
		r1 = rf(ctx, company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompany provides a mock function with given fields: ctx, company
func (_m *CompanyRepository) GetCompany(ctx context.Context, company *repository.CompanyForFilter) ([]repository.Company, error) {
	ret := _m.Called(ctx, company)

	var r0 []repository.Company
	if rf, ok := ret.Get(0).(func(context.Context, *repository.CompanyForFilter) []repository.Company); ok {
		r0 = rf(ctx, company)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repository.CompanyForFilter) error); ok {
		r1 = rf(ctx, company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: ctx, company
func (_m *CompanyRepository) UpdateCompany(ctx context.Context, company *repository.CompanyForUpdate) (int64, error) {
	ret := _m.Called(ctx, company)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *repository.CompanyForUpdate) int64); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repository.CompanyForUpdate) error); ok {
		r1 = rf(ctx, company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCompanyRepository creates a new instance of CompanyRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyRepository(t testing.TB) *CompanyRepository {
	mock := &CompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
